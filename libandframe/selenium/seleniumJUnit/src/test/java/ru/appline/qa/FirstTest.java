package ru.appline.qa;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.converter.JavaTimeConversionPattern;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.EnumSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.time.LocalDate;
import java.util.EnumSet;
import java.util.concurrent.TimeUnit;
@Disabled
public class FirstTest {
    //JUnit5 –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–± –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–º–∏
    @Test
    void test(){
        Assertions.assertTrue("It "+"works!" == "It works!");
    }
    //–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–¥–µ–ª–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    @Test
    void test2(){
        int expected = 1;
        int actual = expected;
        Assertions.assertEquals(expected,actual,"–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞–≤–Ω—ã");
    }
    //–¥–æ–±–∞–≤–∏–ª–∏ —Å–ø–µ—Ü. –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤
    // –Ω–æ —è –Ω–µ —Å–º–æ–≥ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–± –æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª :D
    // –≤ –≥—Ä—É–ø–ø–µ –≤—Å–µ –∞—Å—Å–µ—Ä—Ç—ã –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ,
    // —É—Å–ø–µ—Ö - –∫–æ–≥–¥–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—Å–µ –∞—Å—Å–µ—Ä—Ç—ã
//    @Test
//    void test3(){
//        Assertions.assertAll("habr",
//                () -> assertThat("https://habrahabr.ru", startsWith("https")),
//                () -> assertThat("https://habrahabr.ru", endsWith(".ru"))
//        );
//    }


    // –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è!
    //–≤ –º–æ–∏—Ö —Ä—É–∫–∞—Ö –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–ª :D
//    @Test
//    void  test4(){
//        Assertions.assertLinesMatch(
//                asList("–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏", "–∞ –º–æ–∂–Ω–æ –ø–æ regex: \\d{2}\\.\\d{2}\\.\\d{4}"),
//                asList("–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏", "–∞ –º–æ–∂–Ω–æ –ø–æ regex: 12.09.2017")
//        );
//    }

    @Test
    void test5(){
        Assertions.assertTrue("habr" == "habr", () -> "Assertion messages can be lazily evaluated");
    }
    //–†–∞–±–æ—Ç–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ —Å—Ç–∞–ª–∞ –±–æ–ª–µ–µ –ª–∏–Ω–µ–π–Ω–æ–π.
    //–Ω–æ –Ω–µ –¥–ª—è –º–µ–Ω—è xD
    @Test
    void testException(){
        Throwable exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
            throw new IllegalArgumentException("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
        });

        Assertions.assertEquals("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", exception.getMessage());
    }

    //–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤: int, long, double, String.
    //JUnit 5 –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    @ParameterizedTest
    @ValueSource(strings = { "Hello", "World" })
    void testWithStringParameter(String argument) {
        Assertions.assertNotNull(argument);
    }
    @ParameterizedTest
    @ValueSource(strings = { "01.01.2017", "31.12.2017" })
    void testWithConverter(@JavaTimeConversionPattern("dd.MM.yyyy") LocalDate date) {
        Assertions.assertEquals(2017, date.getYear());
    }

    //–ü—Ä–∏–º–µ—Ä —Å —Ä–∞–∑–±–æ—Ä–æ–º CSV.
    @ParameterizedTest
    @CsvSource({ "foo, 1", "bar, 2", "'baz, qux', 3" })
        // –∏–ª–∏ –¥–∞–∂–µ —Ç–∞–∫: @CsvFileSource(resources = "/two-column.csv")
    void testWithCsvSource(String first, int second) {
        Assertions.assertNotNull(first);
        Assertions.assertNotEquals(0, second);
    }

    //–ü—Ä–∏–º–µ—Ä —Å Enum.
    @ParameterizedTest
    @EnumSource(value = TimeUnit.class, names = { "DAYS", "HOURS" })
    void testWithEnumSourceInclude(TimeUnit timeUnit) {
        Assertions.assertTrue(EnumSet.of(TimeUnit.DAYS, TimeUnit.HOURS).contains(timeUnit));
    }

    @RepeatedTest(5)
    void repeatedTest() {
        System.out.println("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø—è—Ç—å —Ä–∞–∑. ");
    }
    // –ù–æ–≤–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.
    @DisplayName("‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØ")
    void testWithDisplayNameContainingSpecialCharacters() {}

    @Test
    @DisplayName("üò±")
    void testWithDisplayNameContainingEmoji() {
    }

    @Test
    void failingTest() {
        Assertions.fail("a failing test");
    }

    // –≤–º–µ—Å—Ç–æ @BeforeClass
    @BeforeAll
    static void initAll() {
    }

    // –≤–º–µ—Å—Ç–æ @Before
    @BeforeEach
    void init() {
    }

    // –≤–º–µ—Å—Ç–æ @After
    @AfterEach
    void tearDown() {
    }

    // –≤–º–µ—Å—Ç–æ @AfterClass
    @AfterAll
    static void tearDownAll() {
    }
}
